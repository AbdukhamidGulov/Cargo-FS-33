from sys import stdout
from asyncio import run, sleep
from logging import basicConfig, getLogger, WARNING

from aiogram import Bot, Dispatcher, F
from aiogram.types import Message
from aiogram.filters import CommandStart
from aiogram.client.default import DefaultBotProperties
from aiogram.webhook.aiohttp_server import SimpleRequestHandler
from aiohttp import web

from text_info import text
from request import request_router
from profile import profile_router
from database.base import setup_database
from admin.admin_panel import admin_router
from track_numbers import track_code_router
from get_information import get_info_router
from database.users import get_user_by_tg_id
from registration_process import states_router
from database.info_content import get_info_content
from calculator.calc_volume import calc_volume_router
from calculator.calculate_insurance import calc_ins_router
from calculator.calculate_shipping import calc_shipping_router
from keyboards import main_keyboard, reg_keyboard, get_main_inline_keyboard
from middlewares.middleware import ExceptionHandlingMiddleware
from filters_and_config import TELEGRAM_BOT_TOKEN, WEBHOOK_HOST, WEBHOOK_PATH, WEBAPP_HOST, WEBAPP_PORT

bot = Bot(token=TELEGRAM_BOT_TOKEN, default=DefaultBotProperties(parse_mode='HTML'))
dp = Dispatcher()
dp.include_routers(admin_router, get_info_router, states_router, profile_router, text,
                   track_code_router, request_router, calc_volume_router, calc_ins_router, calc_shipping_router)
dp.update.outer_middleware(ExceptionHandlingMiddleware())
WEBHOOK_URL = f'https://{WEBHOOK_HOST}{WEBHOOK_PATH}'
basicConfig(level=WARNING, stream=stdout)
logger = getLogger(__name__)

photo_cache = {}  # –ö—ç—à –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ —Ñ–æ—Ç–æ
async def get_cached_content(key: str) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∫—ç—à–∞ –∏–ª–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –≤ –∫—ç—à–µ."""
    if key not in photo_cache:
        photo_cache[key] = await get_info_content(key)
    return photo_cache[key]

@dp.message(CommandStart())
@dp.message(F.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def start_command(message: Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É `/start` –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é".

    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ –∏ —Ç–µ–∫—Å—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
    –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é; –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é."""
    main_menu_photo = await get_cached_content("main_menu_photo")
    await message.answer_photo(
        main_menu_photo,
        '–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç Telegram-–±–æ—Ç –∫–∞—Ä–≥–æ –∫–æ–º–ø–∞–Ω–∏–∏ <b>FS-33</b> üöö'
    )
    user = await get_user_by_tg_id(message.from_user.id)
    if user:
        await message.answer(
            '–Ø –ø–æ–º–æ–≥—É –≤–∞–º –Ω–∞–π—Ç–∏ –∞–¥—Ä–µ—Å–∞ —Å–∫–ª–∞–¥–æ–≤, –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç—Ä–µ–∫-–∫–æ–¥ –∏ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å —Å —Ü–µ–Ω–∞–º–∏',
            reply_markup=main_keyboard
        )
        await message.answer(
            '–ö–∞–∫ —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å?',
            reply_markup=get_main_inline_keyboard(message.from_user.id)
        )
    else:
        await message.answer(
            '–í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –Ω–∞—à–∏–º –±–æ—Ç–æ–º\n\n'
            '–•–æ—Ç–∏—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è?',
            reply_markup=reg_keyboard
        )



async def on_startup(app):
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞ (—É—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞)."""
    webhook_info = await bot.get_webhook_info()
    if webhook_info.url != WEBHOOK_URL:
        try:
            await bot.set_webhook(url=WEBHOOK_URL)
            logger.info(f"–í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞: {WEBHOOK_URL}")
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–µ–±—Ö—É–∫: {e}")

async def on_shutdown():
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ (—É–¥–∞–ª–µ–Ω–∏–µ –≤–µ–±—Ö—É–∫–∞)."""
    try:
        await bot.delete_webhook()
        logger.info("–í–µ–±—Ö—É–∫ —É–¥–∞–ª–µ–Ω.")
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤–µ–±—Ö—É–∫: {e}")
    finally:
        await bot.session.close()
        logger.info('–°–µ—Å—Å–∏—è –±–æ—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∞')


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Telegram-–±–æ—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º webhook."""
    await setup_database()
    logger.info('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞')

    app = web.Application()
    # –°–æ–∑–¥–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä WebhookRequestHandler —Å –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–º –∏ –±–æ—Ç–æ–º
    webhook_handler = SimpleRequestHandler(
        dispatcher=dp,
        bot=bot,
    )
    # –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞ –ø–æ –ø—É—Ç–∏
    webhook_handler.register(app, path=WEBHOOK_PATH)

    # –í—ã–∑–≤–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ (—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–µ–±—Ö—É–∫)
    app.on_startup.append(on_startup)
    # –í—ã–∑–≤–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã (—É–¥–∞–ª–∏—Ç—å –≤–µ–±—Ö—É–∫)
    app.on_shutdown.append(on_shutdown)

    # –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, WEBAPP_HOST, WEBAPP_PORT)
    await site.start()
    logger.info(f"–í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://{WEBAPP_HOST}:{WEBAPP_PORT}{WEBHOOK_PATH}")

    # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å–µ—Ä–≤–µ—Ä–∞ –¥–æ —Ä—É—á–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    while True:
        await sleep(3600)  # –°–ø–∞—Ç—å –æ–¥–∏–Ω —á–∞—Å


if __name__ == "__main__":
    run(main())
