from aiohttp import ClientSession
from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message

from keyboards import main_keyboard, item_type_keyboard,  get_main_inline_keyboard

calc_ins_router = Router()
item_types = [
    "–û–±—ä—ë–º–Ω—ã–π –≥—Ä—É–∑",
    "–û–¥–µ–∂–¥–∞",
    "–¢–∫–∞–Ω—å",
    "–ù–æ—É—Ç–±—É–∫–∏",
    "–¢–µ–ª–µ—Ñ–æ–Ω—ã",
    "–ü—Ä–æ–¥—É–∫—Ç—ã",
    "–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞",
    "–ê–ø—Ç–µ–∫–∞"
]

class InsuranceState(StatesGroup):
    cost = State()  # –í–≤–æ–¥ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    weight = State()  # –í–≤–æ–¥ –≤–µ—Å–∞
    item_type = State()  # –í—ã–±–æ—Ä —Ç–∏–ø–∞ —Ç–æ–≤–∞—Ä–∞

# –°—Ç–∞—Ä—Ç —Ä–∞—Å—á—ë—Ç–∞ —Å—Ç—Ä–∞—Ö–æ–≤–∫–∏
@calc_ins_router.message(F.text == "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç—Ä–∞—Ö–æ–≤–∫—É")
async def start_insurance(message: Message, state: FSMContext):
    await message.delete()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –≥—Ä—É–∑–∞ –≤ —é–∞–Ω—è—Ö:")
    await state.set_state(InsuranceState.cost)

# –í–≤–æ–¥ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
@calc_ins_router.message(InsuranceState.cost)
async def enter_cost(message: Message, state: FSMContext):
    try:
        cost = float(message.text.replace("¬•", "").strip())
        await state.update_data(cost=cost)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –≥—Ä—É–∑–∞ –≤ –∫–≥:")
        await state.set_state(InsuranceState.weight)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏.")

# –í–≤–æ–¥ –≤–µ—Å–∞
@calc_ins_router.message(InsuranceState.weight)
async def enter_weight(message: Message, state: FSMContext):
    try:
        weight = float(message.text.strip())
        await state.update_data(weight=weight)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞:", reply_markup=item_type_keyboard)
        await state.set_state(InsuranceState.item_type)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤–µ—Å–∞.")

# –í—ã–±–æ—Ä —Ç–∏–ø–∞ —Ç–æ–≤–∞—Ä–∞
@calc_ins_router.message(InsuranceState.item_type)
async def enter_item_type(message: Message, state: FSMContext):
    if message.text not in item_types:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ç–æ–≤–∞—Ä–∞.")
        return

    data = await state.get_data()
    cost_cny = data["cost"]
    weight = data["weight"]
    item_type = message.text

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç

    async with ClientSession() as session:
        async with session.get("https://api.exchangerate-api.com/v4/latest/USD") as response:
            rates = await response.json()
            usd_to_rub = rates["rates"]["RUB"]
            cny_to_usd = rates["rates"]["USD"] / rates["rates"]["CNY"]

    # –ü–µ—Ä–µ–≤–æ–¥ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    cost_usd = cost_cny * cny_to_usd
    price_per_kg = cost_usd / weight

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ —Å—Ç—Ä–∞—Ö–æ–≤–∫–∏
    if price_per_kg <= 20:
        insurance_rate = 1.5
    elif 20 < price_per_kg <= 30:
        insurance_rate = 2.5
    elif 30 < price_per_kg <= 40:
        insurance_rate = 3.5
    else:
        await message.answer("–°—Ç–æ–∏–º–æ—Å—Ç—å 1 –∫–≥ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –ª–∏–º–∏—Ç—ã.")
        return

    # –†–∞—Å—á—ë—Ç —Å—Ç—Ä–∞—Ö–æ–≤–∫–∏
    insurance_cost_usd = cost_usd * (insurance_rate / 100)
    insurance_cost_rub = insurance_cost_usd * usd_to_rub

    # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    await message.answer(
        f"üí¥ –°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞ –≤ —é–∞–Ω—è—Ö: {cost_cny}¬•\n"
        f"üí≤ –°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞ –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö: {cost_usd:.2f}$\n\n"
        f"üîπ –†–æ–¥ —Ç–æ–≤–∞—Ä–∞: {item_type}\n"
        f"üîπ –í–µ—Å: {weight:.2f} –∫–≥.\n\n"
        f"üî∏ –°—Ç–æ–∏–º–æ—Å—Ç—å 1 –∫–≥. —Ç–æ–≤–∞—Ä–∞: {price_per_kg:.2f}$\n"
        f"üî∏ –°—Ç—Ä–∞—Ö–æ–≤–∫–∞ –ø—Ä–∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ {price_per_kg:.2f}$ –∑–∞ 1 –∫–≥. "
        f"—Å–æ—Å—Ç–∞–≤–∏—Ç: {insurance_rate}%\n\n"
        f"–ò–¢–û–ì–û:\n"
        f"üí≤ –°—É–º–º–∞ —Å—Ç—Ä–∞—Ö–æ–≤–∫–∏ –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö: {insurance_cost_usd:.2f}$\n"
        f"üá∑üá∫ –°—É–º–º–∞ —Å—Ç—Ä–∞—Ö–æ–≤–∫–∏ –≤ —Ä—É–±.: {insurance_cost_rub:.0f} —Ä—É–±." ,
        reply_markup=main_keyboard
    )
    await state.clear()
    await message.answer('–ß–µ–º —è –µ—â—ë –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å?', reply_markup=get_main_inline_keyboard(message.from_user.id))
