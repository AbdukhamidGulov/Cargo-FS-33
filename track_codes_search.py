import re
from logging import getLogger
from typing import List, Tuple

from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery

from database.track_codes import get_track_code_status, get_user_track_codes
from keyboards import main_keyboard, cancel_keyboard, add_track_codes_follow_up_keyboard

# –ò–º–ø–æ—Ä—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–Ω—Å—Ç–∞–Ω—Ç –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ track_numbers.
# –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ track_numbers.py –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –≤ main.py –¥–æ track_codes_search.py
# –∏–ª–∏ —á—Ç–æ –≤ track_numbers.py —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω—É–∂–Ω—ã—Ö –∫–æ–Ω—Å—Ç–∞–Ω—Ç.
from track_numbers import TRACK_CODE_PATTERN, status_messages, TrackCodeStates

track_code_search_router = Router()
logger = getLogger(__name__)


def parse_track_codes(text: str) -> List[str]:
    """–†–∞–∑–¥–µ–ª—è–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —Å–ø–∏—Å–æ–∫ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–∫-–∫–æ–¥–æ–≤."""
    # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ –ø–µ—Ä–µ–≤–æ–¥–∞–º —Å—Ç—Ä–æ–∫–∏, –∑–∞–ø—è—Ç—ã–º, –ø—Ä–æ–±–µ–ª–∞–º –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
    codes = re.split(r'[\n, \s]+', text.strip())
    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø—É—Å—Ç—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—É
    valid_codes = [code for code in codes if re.fullmatch(TRACK_CODE_PATTERN, code, re.IGNORECASE)]
    return valid_codes


# ************************************************
# 1. –ü–†–û–í–ï–†–ö–ê –û–î–ù–û–ì–û/–ù–ï–°–ö–û–õ–¨–ö–ò–• –¢–†–ï–ö-–ö–û–î–û–í (–û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Ö–µ–Ω–¥–ª–µ—Ä)
# ************************************************

@track_code_search_router.message(F.text.lower() == "–ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–∫-–∫–æ–¥–æ–≤")
async def check_track_code(message: Message, state: FSMContext) -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Ç—Ä–µ–∫-–∫–æ–¥–∞."""
    await message.answer(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à <b>—Ç—Ä–µ–∫-–∫–æ–¥</b> –∏–ª–∏ <b>—Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫-–∫–æ–¥–æ–≤</b> (–∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏) –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.",
        reply_markup=cancel_keyboard
    )
    await state.set_state(TrackCodeStates.check_single_code)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞—á–∞–ª –ø—Ä–æ–≤–µ—Ä–∫—É —Ç—Ä–µ–∫-–∫–æ–¥–æ–≤.")


@track_code_search_router.message(TrackCodeStates.check_single_code)
async def process_track_code(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Ç—Ä–µ–∫-–∫–æ–¥—ã."""
    if message.text == "–û—Ç–º–µ–Ω–∞":
        await message.answer("–†–µ–∂–∏–º –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç—Ä–µ–∫-–∫–æ–¥–æ–≤ –∑–∞–≤–µ—Ä—à—ë–Ω.", reply_markup=main_keyboard)
        await state.clear()
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–≤–µ—Ä—à–∏–ª –ø—Ä–æ–≤–µ—Ä–∫—É —Ç—Ä–µ–∫-–∫–æ–¥–∞.")
        return

    tg_id: int = message.from_user.id
    input_text: str = message.text.strip()

    track_codes: List[str] = parse_track_codes(input_text)

    if not track_codes:
        await message.answer(
            "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Ç—Ä–µ–∫-–∫–æ–¥–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥(—ã) (–º–∏–Ω–∏–º—É–º 8 –±—É–∫–≤/—Ü–∏—Ñ—Ä).",
            reply_markup=cancel_keyboard
        )
        return

    is_single_code = len(track_codes) == 1

    if is_single_code:
        # **********************************
        # –õ–û–ì–ò–ö–ê –î–õ–Ø –û–î–ù–û–ì–û –ö–û–î–ê (–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ)
        # **********************************
        track_code_text = track_codes[0]
        try:
            track_info = await get_track_code_status(track_code_text)

            if track_info:
                status = track_info['status']
                owner_tg_id = track_info.get('tg_id', '–ù/–î')
                updated_at = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ (–æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞)"
                status_message = status_messages.get(status,
                                                     "–°—Ç–∞—Ç—É—Å —Ç—Ä–µ–∫-–∫–æ–¥–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

                # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏
                ownership_status = "–ù/–î (–Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è)"
                if owner_tg_id != '–ù/–î' and owner_tg_id is not None:
                    if owner_tg_id == tg_id:
                        ownership_status = "‚úÖ –í—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥"
                    else:
                        ownership_status = f"üë§ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (ID: <code>{owner_tg_id}</code>)"

                response = (
                    f"üîé <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ —Ç—Ä–µ–∫-–∫–æ–¥–∞:</b>\n\n"
                    f"  –ö–æ–¥: <code>{track_code_text}</code>\n"
                    f"  –°—Ç–∞—Ç—É—Å: <b>{status_message}</b>\n"
                    f"  –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ: {ownership_status}\n"
                    f"  –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: <i>{updated_at}</i>\n"
                )

                await message.answer(response)
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {tg_id} –ø—Ä–æ–≤–µ—Ä–∏–ª —Ç—Ä–µ–∫-–∫–æ–¥ {track_code_text}: —Å—Ç–∞—Ç—É—Å {status}")
            else:
                await message.answer(
                    f"–¢—Ä–µ–∫-–∫–æ–¥ <code>{track_code_text}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º–µ.\n\n"
                    f"–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ <b>–Ω–∞—á–∞—Ç—å –µ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å</b>, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π <code>–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–∫-–∫–æ–¥—ã</code>."
                )
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {tg_id} –ø—Ä–æ–≤–µ—Ä–∏–ª –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç—Ä–µ–∫-–∫–æ–¥ {track_code_text}.")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç—Ä–µ–∫-–∫–æ–¥–∞ {track_code_text} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {tg_id}: {e}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç—Ä–µ–∫-–∫–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    else:
        # **********************************
        # –õ–û–ì–ò–ö–ê –î–õ–Ø –ú–ù–û–ñ–ï–°–¢–í–ê –ö–û–î–û–í (–ö—Ä–∞—Ç–∫–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ)
        # **********************************
        response_lines = [f"üì¶ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ {len(track_codes)} —Ç—Ä–µ–∫-–∫–æ–¥–æ–≤:</b>\n"]

        for track_code_text in track_codes:
            try:
                track_info = await get_track_code_status(track_code_text)

                status_message = "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ"
                if track_info:
                    status = track_info['status']
                    status_message = status_messages.get(status, "–°—Ç–∞—Ç—É—Å –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω")

                response_lines.append(f"‚Ä¢ <code>{track_code_text}</code> ‚Üí <i>{status_message}</i>")

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç—Ä–µ–∫-–∫–æ–¥–∞ {track_code_text} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {tg_id}: {e}")
                response_lines.append(f"‚Ä¢ <code>{track_code_text}</code> ‚Üí <i>–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏</i>")

        response = "\n".join(response_lines)
        await message.answer(response)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {tg_id} –ø—Ä–æ–≤–µ—Ä–∏–ª {len(track_codes)} —Ç—Ä–µ–∫-–∫–æ–¥–æ–≤.")

    await message.answer(
        "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π <b>—Ç—Ä–µ–∫-–∫–æ–¥</b> (–∏–ª–∏ —Å–ø–∏—Å–æ–∫) –∏–ª–∏ –Ω–∞–∂–∞—Ç—å '<code>–û—Ç–º–µ–Ω–∞</code>', —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É.",
        reply_markup=cancel_keyboard
    )


# ************************************************
# 2. –ü–†–û–°–ú–û–¢–† –°–í–û–ò–• –¢–†–ï–ö-–ö–û–î–û–í
# ************************************************

@track_code_search_router.callback_query(F.data == "my_track_codes")
async def view_my_track_codes(callback: CallbackQuery):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ø–∏—Å–æ–∫ –µ–≥–æ —Ç—Ä–µ–∫-–∫–æ–¥–æ–≤."""
    await callback.message.delete()
    user_tg_id = callback.from_user.id
    track_codes = await get_user_track_codes(user_tg_id)

    if track_codes:
        response = "<b>–í–∞—à–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Ç—Ä–µ–∫-–∫–æ–¥—ã:</b>\n\n"
        for my_track_code, status in track_codes:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º status_messages –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–ª–µ–µ –ø–æ–Ω—è—Ç–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
            status_message = status_messages.get(status, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å")
            response += f"‚Ä¢ <code>{my_track_code}</code> - <i>{status_message}</i>\n"
        await callback.message.answer(response)
    else:
        await callback.message.answer(
            "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–∫-–∫–æ–¥–æ–≤.\n"
            "–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∏—Ö, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π <code>–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–∫-–∫–æ–¥–∞</code>.",
            reply_markup=add_track_codes_follow_up_keyboard
        )

    await callback.answer()  # –£–±–∏—Ä–∞–µ–º '—á–∞—Å–∏–∫–∏'


# ************************************************
# 3. –ü–ï–†–ï–•–û–î –ö –ü–†–û–í–ï–†–ö–ï –¢–†–ï–ö-–ö–û–î–ê (–ß–µ—Ä–µ–∑ Inline-–∫–Ω–æ–ø–∫—É)
# ************************************************

@track_code_search_router.callback_query(F.data == "start_check_codes")
async def start_check_codes_from_follow_up(callback: CallbackQuery, state: FSMContext) -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Ç—Ä–µ–∫-–∫–æ–¥–∞ –ø–æ –Ω–∞–∂–∞—Ç–∏—é Inline-–∫–Ω–æ–ø–∫–∏."""
    await callback.message.delete()  # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏

    await callback.message.answer(
        "–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ —Ä–µ–∂–∏–º –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç—Ä–µ–∫-–∫–æ–¥–æ–≤. –û—Ç–ø—Ä–∞–≤—å—Ç–µ <b>—Ç—Ä–µ–∫-–∫–æ–¥</b> (–∏–ª–∏ —Å–ø–∏—Å–æ–∫) –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.",
        reply_markup=cancel_keyboard
    )
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –µ–¥–∏–Ω–∏—á–Ω–æ–≥–æ —Ç—Ä–µ–∫-–∫–æ–¥–∞
    await state.set_state(TrackCodeStates.check_single_code)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –Ω–∞—á–∞–ª –ø—Ä–æ–≤–µ—Ä–∫—É —Ç—Ä–µ–∫-–∫–æ–¥–∞ —á–µ—Ä–µ–∑ follow-up –∫–Ω–æ–ø–∫—É.")
    await callback.answer()
